diff -urp mongodb-src-r2.2.4.orig/src/mongo/db/db.cpp mongodb-src-r2.2.4/src/mongo/db/db.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/db/db.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/db/db.cpp	2013-05-02 14:51:31.833000000 -0500
@@ -349,7 +349,7 @@ namespace mongo {
         boost::filesystem::path path( dbpath );
         for ( boost::filesystem::directory_iterator i( path );
                 i != boost::filesystem::directory_iterator(); ++i ) {
-            string fileName = boost::filesystem::path(*i).leaf();
+            string fileName = boost::filesystem::path(*i).leaf().string();
             if ( boost::filesystem::is_directory( *i ) &&
                     fileName.length() && fileName[ 0 ] == '$' )
                 boost::filesystem::remove_all( *i );
@@ -749,11 +749,6 @@ static int mongoDbMain(int argc, char* a
     dbExecCommand = argv[0];
 
     srand(curTimeMicros());
-#if( BOOST_VERSION >= 104500 )
-    boost::filesystem::path::default_name_check( boost::filesystem2::no_check );
-#else
-    boost::filesystem::path::default_name_check( boost::filesystem::no_check );
-#endif
 
     {
         unsigned x = 0x12345678;
@@ -1084,7 +1079,7 @@ static int mongoDbMain(int argc, char* a
         if (params.count("shutdown")){
             bool failed = false;
 
-            string name = ( boost::filesystem::path( dbpath ) / "mongod.lock" ).native_file_string();
+            string name = ( boost::filesystem::path( dbpath ) / "mongod.lock" ).string();
             if ( !boost::filesystem::exists( name ) || boost::filesystem::file_size( name ) == 0 )
                 failed = true;
 
diff -urp mongodb-src-r2.2.4.orig/src/mongo/db/dur.cpp mongodb-src-r2.2.4/src/mongo/db/dur.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/db/dur.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/db/dur.cpp	2013-05-02 14:51:31.835000000 -0500
@@ -779,7 +779,7 @@ namespace mongo {
 
             bool samePartition = true;
             try {
-                const string dbpathDir = boost::filesystem::path(dbpath).native_directory_string();
+                const string dbpathDir = boost::filesystem::path(dbpath).string();
                 samePartition = onSamePartition(getJournalDir().string(), dbpathDir);
             }
             catch(...) {
diff -urp mongodb-src-r2.2.4.orig/src/mongo/db/dur_journal.cpp mongodb-src-r2.2.4/src/mongo/db/dur_journal.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/db/dur_journal.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/db/dur_journal.cpp	2013-05-02 14:51:31.836000000 -0500
@@ -176,7 +176,7 @@ namespace mongo {
                 for ( boost::filesystem::directory_iterator i( getJournalDir() );
                         i != boost::filesystem::directory_iterator();
                         ++i ) {
-                    string fileName = boost::filesystem::path(*i).leaf();
+                    string fileName = boost::filesystem::path(*i).leaf().string();
                     if( anyFiles || str::startsWith(fileName, "j._") )
                         return true;
                 }
@@ -194,7 +194,7 @@ namespace mongo {
                 for ( boost::filesystem::directory_iterator i( getJournalDir() );
                         i != boost::filesystem::directory_iterator();
                         ++i ) {
-                    string fileName = boost::filesystem::path(*i).leaf();
+                    string fileName = boost::filesystem::path(*i).leaf().string();
                     if( str::startsWith(fileName, "j._") ) {
                         try {
                             removeOldJournalFile(*i);
diff -urp mongodb-src-r2.2.4.orig/src/mongo/db/dur_recover.cpp mongodb-src-r2.2.4/src/mongo/db/dur_recover.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/db/dur_recover.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/db/dur_recover.cpp	2013-05-02 14:51:31.838000000 -0500
@@ -72,7 +72,7 @@ namespace mongo {
                     i != boost::filesystem::directory_iterator();
                     ++i ) {
                 boost::filesystem::path filepath = *i;
-                string fileName = boost::filesystem::path(*i).leaf();
+                string fileName = boost::filesystem::path(*i).leaf().string();
                 if( str::startsWith(fileName, "j._") ) {
                     unsigned u = str::toUnsigned( str::after(fileName, '_') );
                     if( m.count(u) ) {
@@ -85,7 +85,7 @@ namespace mongo {
                 if( i != m.begin() && m.count(i->first - 1) == 0 ) {
                     uasserted(13532,
                     str::stream() << "unexpected file in journal directory " << dir.string()
-                      << " : " << boost::filesystem::path(i->second).leaf() << " : can't find its preceeding file");
+                      << " : " << boost::filesystem::path(i->second).leaf().string() << " : can't find its preceeding file");
                 }
                 files.push_back(i->second);
             }
diff -urp mongodb-src-r2.2.4.orig/src/mongo/db/instance.cpp mongodb-src-r2.2.4/src/mongo/db/instance.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/db/instance.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/db/instance.cpp	2013-05-02 14:51:31.841000000 -0500
@@ -826,13 +826,13 @@ namespace mongo {
                 i != boost::filesystem::directory_iterator(); ++i ) {
             if ( directoryperdb ) {
                 boost::filesystem::path p = *i;
-                string dbName = p.leaf();
+                string dbName = p.leaf().string();
                 p /= ( dbName + ".ns" );
                 if ( exists( p ) )
                     names.push_back( dbName );
             }
             else {
-                string fileName = boost::filesystem::path(*i).leaf();
+                string fileName = boost::filesystem::path(*i).leaf().string();
                 if ( fileName.length() > 3 && fileName.substr( fileName.length() - 3, 3 ) == ".ns" )
                     names.push_back( fileName.substr( 0, fileName.length() - 3 ) );
             }
@@ -1095,7 +1095,7 @@ namespace mongo {
     }
 
     void acquirePathLock(bool doingRepair) {
-        string name = ( boost::filesystem::path( dbpath ) / "mongod.lock" ).native_file_string();
+        string name = ( boost::filesystem::path( dbpath ) / "mongod.lock" ).string();
 
         bool oldFile = false;
 
diff -urp mongodb-src-r2.2.4.orig/src/mongo/db/pdfile.cpp mongodb-src-r2.2.4/src/mongo/db/pdfile.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/db/pdfile.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/db/pdfile.cpp	2013-05-02 14:51:31.846000000 -0500
@@ -1736,7 +1736,7 @@ namespace mongo {
             virtual bool apply( const Path &p ) {
                 if ( !boost::filesystem::exists( p ) )
                     return false;
-                boostRenameWrapper( p, newPath_ / ( p.leaf() + ".bak" ) );
+                boostRenameWrapper( p, newPath_ / ( p.leaf().string() + ".bak" ) );
                 return true;
             }
             virtual const char * op() const {
@@ -1759,7 +1759,7 @@ namespace mongo {
             virtual bool apply( const Path &p ) {
                 if ( !boost::filesystem::exists( p ) )
                     return false;
-                boostRenameWrapper( p, newPath_ / p.leaf() );
+                boostRenameWrapper( p, newPath_ / p.leaf().string() );
                 return true;
             }
             virtual const char * op() const {
@@ -1844,7 +1844,7 @@ namespace mongo {
             uniqueReservedPath( ( preserveClonedFilesOnFailure || backupOriginalFiles ) ?
                                 "backup" : "_tmp" );
         MONGO_ASSERT_ON_EXCEPTION( boost::filesystem::create_directory( reservedPath ) );
-        string reservedPathString = reservedPath.native_directory_string();
+        string reservedPathString = reservedPath.string();
 
         bool res;
         {
diff -urp mongodb-src-r2.2.4.orig/src/mongo/dbtests/framework.cpp mongodb-src-r2.2.4/src/mongo/dbtests/framework.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/dbtests/framework.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/dbtests/framework.cpp	2013-05-02 14:51:31.847000000 -0500
@@ -199,7 +199,7 @@ namespace mongo {
                 boost::filesystem::create_directory(p);
             }
 
-            string dbpathString = p.native_directory_string();
+            string dbpathString = p.string();
             dbpath = dbpathString.c_str();
 
             cmdLine.prealloc = false;
diff -urp mongodb-src-r2.2.4.orig/src/mongo/pch.h mongodb-src-r2.2.4/src/mongo/pch.h
--- mongodb-src-r2.2.4.orig/src/mongo/pch.h	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/pch.h	2013-05-02 14:51:31.848000000 -0500
@@ -44,7 +44,7 @@
 #include "string.h"
 #include "limits.h"
 
-#define BOOST_FILESYSTEM_VERSION 2
+#define BOOST_FILESYSTEM_VERSION 3
 #include <boost/shared_ptr.hpp>
 #include <boost/smart_ptr.hpp>
 #include <boost/function.hpp>
diff -urp mongodb-src-r2.2.4.orig/src/mongo/shell/shell_utils_launcher.cpp mongodb-src-r2.2.4/src/mongo/shell/shell_utils_launcher.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/shell/shell_utils_launcher.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/shell/shell_utils_launcher.cpp	2013-05-02 14:51:31.849000000 -0500
@@ -184,7 +184,7 @@ namespace mongo {
             }
 #endif
 
-            _argv.push_back( programPath.native_file_string() );
+            _argv.push_back( programPath.string() );
 
             _port = -1;
 
@@ -536,14 +536,14 @@ namespace mongo {
             boost::filesystem::directory_iterator i( from );
             while( i != end ) {
                 boost::filesystem::path p = *i;
-                if ( p.leaf() != "mongod.lock" ) {
+                if ( p.leaf().string() != "mongod.lock" ) {
                     if ( boost::filesystem::is_directory( p ) ) {
-                        boost::filesystem::path newDir = to / p.leaf();
+                        boost::filesystem::path newDir = to / p.leaf().string();
                         boost::filesystem::create_directory( newDir );
                         copyDir( p, newDir );
                     }
                     else {
-                        boost::filesystem::copy_file( p, to / p.leaf() );
+                        boost::filesystem::copy_file( p, to / p.leaf().string() );
                     }
                 }
                 ++i;
diff -urp mongodb-src-r2.2.4.orig/src/mongo/tools/restore.cpp mongodb-src-r2.2.4/src/mongo/tools/restore.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/tools/restore.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/tools/restore.cpp	2013-05-02 14:53:33.259000000 -0500
@@ -229,7 +229,7 @@ public:
         LOG(2) << "drillDown: " << root.string() << endl;
 
         // skip hidden files and directories
-        if (root.leaf()[0] == '.' && root.leaf() != ".")
+        if (root.leaf().string()[0] == '.' && root.leaf().string() != ".")
             return;
 
         if ( is_directory( root ) ) {
@@ -259,10 +259,10 @@ public:
                 }
 
                 // don't insert oplog
-                if (top_level && !use_db && p.leaf() == "oplog.bson")
+                if (top_level && !use_db && p.leaf().string() == "oplog.bson")
                     continue;
 
-                if ( p.leaf() == "system.indexes.bson" ) {
+                if ( p.leaf().string() == "system.indexes.bson" ) {
                     indexes = p;
                 } else {
                     drillDown(p, use_db, use_coll, oplogReplayLimit);
@@ -289,7 +289,7 @@ public:
 
         log() << root.string() << endl;
 
-        if ( root.leaf() == "system.profile.bson" ) {
+        if ( root.leaf().string() == "system.profile.bson" ) {
             log() << "\t skipping" << endl;
             return;
         }
@@ -311,7 +311,7 @@ public:
 
         verify( ns.size() );
 
-        string oldCollName = root.leaf(); // Name of the collection that was dumped from
+        string oldCollName = root.leaf().string(); // Name of the collection that was dumped from
         oldCollName = oldCollName.substr( 0 , oldCollName.find_last_of( "." ) );
         if (use_coll) {
             ns += "." + _coll;
@@ -330,7 +330,7 @@ public:
         log() << "\tgoing into namespace [" << ns << "]" << endl;
 
         if ( _drop ) {
-            if (root.leaf() != "system.users.bson" ) {
+            if (root.leaf().string() != "system.users.bson" ) {
                 log() << "\t dropping" << endl;
                 conn().dropCollection( ns );
             } else {
@@ -350,7 +350,7 @@ public:
             if (!boost::filesystem::exists(metadataFile.string())) {
                 // This is fine because dumps from before 2.1 won't have a metadata file, just print a warning.
                 // System collections shouldn't have metadata so don't warn if that file is missing.
-                if (!startsWith(metadataFile.leaf(), "system.")) {
+                if (!startsWith(metadataFile.leaf().string(), "system.")) {
                     log() << metadataFile.string() << " not found. Skipping." << endl;
                 }
             } else {
@@ -380,7 +380,7 @@ public:
         }
 
         processFile( root );
-        if (_drop && root.leaf() == "system.users.bson") {
+        if (_drop && root.leaf().string() == "system.users.bson") {
             // Delete any users that used to exist but weren't in the dump file
             for (set<string>::iterator it = _users.begin(); it != _users.end(); ++it) {
                 BSONObj userMatch = BSON("user" << *it);
diff -urp mongodb-src-r2.2.4.orig/src/mongo/tools/tool.cpp mongodb-src-r2.2.4/src/mongo/tools/tool.cpp
--- mongodb-src-r2.2.4.orig/src/mongo/tools/tool.cpp	2013-03-31 21:41:49.000000000 -0500
+++ mongodb-src-r2.2.4/src/mongo/tools/tool.cpp	2013-05-02 14:51:31.858000000 -0500
@@ -118,12 +118,6 @@ namespace mongo {
         // we want durability to be disabled.
         cmdLine.dur = false;
 
-#if( BOOST_VERSION >= 104500 )
-    boost::filesystem::path::default_name_check( boost::filesystem2::no_check );
-#else
-    boost::filesystem::path::default_name_check( boost::filesystem::no_check );
-#endif
-
         _name = argv[0];
 
         /* using the same style as db.cpp */
