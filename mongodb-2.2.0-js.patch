diff -ru mongodb-src-r2.2.0.orig/src/mongo/scripting/engine_spidermonkey.cpp mongodb-src-r2.2.0/src/mongo/scripting/engine_spidermonkey.cpp
--- mongodb-src-r2.2.0.orig/src/mongo/scripting/engine_spidermonkey.cpp	2012-08-28 00:28:11.000000000 -0500
+++ mongodb-src-r2.2.0/src/mongo/scripting/engine_spidermonkey.cpp	2012-09-19 13:20:54.644308473 -0500
@@ -29,6 +29,17 @@
 
 #include "mongo/util/mongoutils/str.h"
 
+#if JS_VERSION < 185
+#define JS_StrictPropertyStub JS_PropertyStub
+#define FUNCSPEC(name, call, nargs, flags) { name, call, nargs, flags, 0 }
+#define JS_RVAL(cx, rval) *rval
+#define JS_SET_RVAL(cx, rval, v) JS_RVAL(cx, rval) = v
+#define JS_AddNamedObjectRoot JS_AddNamedRoot
+#define JS_RemoveObjectRoot JS_RemoveRoot
+#else
+#define FUNCSPEC(name, call, nargs, flags) { name, call, nargs, flags }
+#endif
+
 #define smuassert( cx , msg , val ) \
     if ( ! ( val ) ){ \
         JS_ReportError( cx , msg ); \
@@ -190,13 +201,20 @@
         }
 
         string toString( JSString* jsString ) {
-            size_t srclen = JS_GetStringLength( jsString );
+            size_t srclen = 0;
+            const jschar * utf16Chars = NULL;
+
+#if JS_VERSION < 185
+            srclen = JS_GetStringLength( so );
+            utf16Chars = JS_GetStringChars( so );
+#else
+            utf16Chars = JS_GetStringCharsAndLength( _context , so , &srclen );
+#endif
             if( srclen == 0 )
                 return "";
 
             size_t len = (srclen * 6) + 1;
             boost::scoped_array<char> utf8Chars( new char[len] );
-            jschar* utf16Chars = JS_GetStringChars( jsString );
             if ( !JS_EncodeCharacters( _context, utf16Chars, srclen, utf8Chars.get(), &len ) ) {
                 uasserted( 16268, "error converting UTF-16 string to UTF-8" );
             }
@@ -355,7 +373,7 @@
 
             case JSTYPE_OBJECT: {
                 JSObject * o = JSVAL_TO_OBJECT( val );
-                if ( ! o || o == JSVAL_NULL ) {
+                if ( ! o || o == (JSObject *) JSVAL_NULL ) {
                     b.appendNull( name );
                 }
                 else if ( ! appendSpecialDBObject( this , b , name , val , o ) ) {
@@ -647,7 +665,13 @@
                     flags++;
                 }
 
-                JSObject * r = JS_NewRegExpObject( _context , (char*)e.regex() , strlen( e.regex() ) , flagNumber );
+                JSObject * r = JS_NewRegExpObject( _context ,
+#if JS_VERSION >= 185
+                                                   JS_GetGlobalObject(_context),
+#endif
+                                                   (char*)e.regex() ,
+                                                   strlen( e.regex() ) ,
+                                                   flagNumber );
                 verify( r );
                 return OBJECT_TO_JSVAL( r );
             }
@@ -670,7 +694,11 @@
                 return OBJECT_TO_JSVAL( JS_GetFunctionObject( func ) );
             }
             case Date:
+#if JS_VERSION < 185
                 return OBJECT_TO_JSVAL( js_NewDateObjectMsec( _context , (jsdouble) ((long long)e.date().millis) ) );
+#else
+                return OBJECT_TO_JSVAL( JS_NewDateObjectMsec( _context , (jsdouble) ((long long)e.date().millis) ) );
+#endif
 
             case MinKey:
                 return OBJECT_TO_JSVAL( JS_NewObject( _context , &minkey_class , 0 , 0 ) );
@@ -802,15 +830,16 @@
 
     JSBool bson_enumerate( JSContext *cx, JSObject *obj, JSIterateOp enum_op, jsval *statep, jsid *idp ) {
         try {
-            BSONHolder * o = GETHOLDER( cx , obj );
+            Convertor c(cx);
 
             if ( enum_op == JSENUMERATE_INIT ) {
+                BSONHolder * o = GETHOLDER( cx , obj );
                 if ( o ) {
                     BSONFieldIterator * it = o->it();
                     *statep = PRIVATE_TO_JSVAL( it );
                 }
                 else {
-                    *statep = 0;
+                    *statep = JSVAL_NULL;
                 }
                 if ( idp )
                     *idp = JSVAL_ZERO;
@@ -818,20 +847,19 @@
             }
 
             BSONFieldIterator * it = (BSONFieldIterator*)JSVAL_TO_PRIVATE( *statep );
-            if ( ! it ) {
-                *statep = 0;
+            if ( ! it || *statep == JSVAL_NULL ) {
+                *statep = JSVAL_NULL;
                 return JS_TRUE;
             }
 
             if ( enum_op == JSENUMERATE_NEXT ) {
                 if ( it->more() ) {
                     string name = it->next();
-                    Convertor c(cx);
                     verify( JS_ValueToId( cx , c.toval( name.c_str() ) , idp ) );
                 }
                 else {
                     delete it;
-                    *statep = 0;
+                    *statep = JSVAL_NULL;
                 }
                 return JS_TRUE;
             }
@@ -857,7 +885,11 @@
         }
     }
 
+#if JS_VERSION < 185
     JSBool noaccess( JSContext *cx, JSObject *obj, jsval idval, jsval *vp) {
+#else
+    JSBool noaccess( JSContext *cx, JSObject *obj, jsid id, jsval *vp) {
+#endif
         try {
             BSONHolder * holder = GETHOLDER( cx , obj );
             if ( ! holder ) {
@@ -881,13 +913,23 @@
         }
     }
 
+#if JS_VERSION >= 185
+    JSBool noaccess_strict( JSContext *cx, JSObject *obj, jsid id, JSBool strict, jsval *vp) {
+        return noaccess(cx, obj, id, vp);
+    }
+#endif
+
     JSClass bson_ro_class = {
         "bson_ro_object",                                                   // class name
         JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE,  // flags
         noaccess,                                                           // addProperty
         noaccess,                                                           // delProperty
         JS_PropertyStub,                                                    // getProperty
+#if JS_VERSION < 185
         noaccess,                                                           // setProperty
+#else
+        noaccess_strict,                                                    // setProperty
+#endif
         (JSEnumerateOp)bson_enumerate,                                      // enumerate
         (JSResolveOp)resolveBSONField,                                      // resolve
         JS_ConvertStub,                                                     // convert
@@ -895,7 +937,11 @@
         JSCLASS_NO_OPTIONAL_MEMBERS                                         // optional members
     };
 
+#if JS_VERSION < 185
     JSBool bson_cons( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool bson_cons( JSContext *cx, uintN argc, jsval *rval ) {
+#endif
         JS_ReportError( cx , "can't construct bson object" );
         return JS_FALSE;
     }
@@ -904,7 +950,13 @@
         { 0 }
     };
 
+#if JS_VERSION < 185
     JSBool bson_add_prop( JSContext *cx, JSObject *obj, jsval idval, jsval *vp) {
+#else
+    JSBool bson_add_prop( JSContext *cx, JSObject *obj, jsid id, jsval *vp) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
         try {
             BSONHolder * holder = GETHOLDER( cx , obj );
             if ( ! holder ) {
@@ -933,8 +985,13 @@
         return JS_TRUE;
     }
 
-
+#if JS_VERSION < 185
     JSBool mark_modified( JSContext *cx, JSObject *obj, jsval idval, jsval *vp) {
+#else
+    JSBool mark_modified( JSContext *cx, JSObject *obj, jsid id, JSBool strict, jsval *vp) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
         try {
             Convertor c(cx);
             BSONHolder * holder = GETHOLDER( cx , obj );
@@ -958,7 +1015,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool mark_modified_remove( JSContext *cx, JSObject *obj, jsval idval, jsval *vp) {
+#else
+    JSBool mark_modified_remove( JSContext *cx, JSObject *obj, jsid id, jsval *vp) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
         try {
             Convertor c(cx);
             BSONHolder * holder = GETHOLDER( cx , obj );
@@ -1000,7 +1063,7 @@
         JS_PropertyStub,                // addProperty
         JS_PropertyStub,                // delProperty
         JS_PropertyStub,                // getProperty
-        JS_PropertyStub,                // setProperty
+        JS_StrictPropertyStub,          // setProperty
         JS_EnumerateStub,               // enumerate
         JS_ResolveStub,                 // resolve
         JS_ConvertStub,                 // convert
@@ -1028,7 +1091,7 @@
         verify( JS_SetPrivate( cx, o, new BinDataHolder( data.get(), len ) ) );
         c->setProperty( o, "len", c->toval( static_cast<double>(len) ) );
         c->setProperty( o, "type", c->toval( static_cast<double>(subtype) ) );
-        *rval = OBJECT_TO_JSVAL( o );
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL( o ));
     }
 
     static bool testHexString( JSContext* cx, const string& hexString ) {
@@ -1044,7 +1107,12 @@
         return true;
     }
 
+#if JS_VERSION < 185
     JSBool _HexData( JSContext * cx , JSObject * obj , uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool _HexData( JSContext * cx , uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+#endif
         try {
             if ( argc != 2 ) {
                 JS_ReportError( cx , "HexData needs 2 arguments -- HexData(subtype,hexstring)" );
@@ -1084,7 +1152,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool _UUID( JSContext * cx , JSObject * obj , uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool _UUID( JSContext * cx , uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+#endif
         try {
             if ( argc != 1 ) {
                 JS_ReportError( cx , "UUID needs argument -- UUID(hexstring)" );
@@ -1115,7 +1188,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool _MD5( JSContext * cx , JSObject * obj , uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool _MD5( JSContext * cx , uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+#endif
         try {
             if ( argc != 1 ) {
                 JS_ReportError( cx , "MD5 needs argument -- MD5(hexstring)" );
@@ -1146,7 +1224,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool native_print( JSContext * cx, JSObject * obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool native_print( JSContext *cx , uintN argc, jsval *rval) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JS_SET_RVAL(cx, rval, JSVAL_VOID);
+#endif
         stringstream ss;
         bool someWritten = false;
         try {
@@ -1174,7 +1258,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool native_helper( JSContext *cx , JSObject *obj , uintN argc, jsval *argv , jsval *rval ) {
+#else
+    JSBool native_helper( JSContext *cx , uintN argc, jsval *rval ) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+        jsval *argv = JS_ARGV(cx, rval);
+#endif
         try {
             Convertor c(cx);
             NativeFunction func = reinterpret_cast<NativeFunction>(
@@ -1204,10 +1294,10 @@
             }
 
             if ( out.isEmpty() ) {
-                *rval = JSVAL_VOID;
+                JS_SET_RVAL(cx, rval, JSVAL_VOID);
             }
             else {
-                *rval = c.toval( out.firstElement() );
+                JS_SET_RVAL(cx, rval, c.toval( out.firstElement() ));
             }
         }
         catch ( const AssertionException& e ) {
@@ -1223,29 +1313,43 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool native_load( JSContext *cx , JSObject *obj , uintN argc, jsval *argv , jsval *rval );
+#else
+    JSBool native_load( JSContext *cx , uintN argc, jsval *vp );
+#endif
 
+#if JS_VERSION < 185
     JSBool native_gc( JSContext *cx , JSObject *obj , uintN argc, jsval *argv , jsval *rval ) {
+#else
+    JSBool native_gc( JSContext *cx , uintN argc, jsval *rval ) {
+        JS_SET_RVAL(cx, rval, JSVAL_VOID);
+#endif
         JS_GC( cx );
         return JS_TRUE;
     }
 
     JSFunctionSpec globalHelpers[] = {
-        { "print" , &native_print , 0 , 0 , 0 } ,
-        { "nativeHelper" , &native_helper , 1 , 0 , 0 } ,
-        { "load" , &native_load , 1 , 0 , 0 } ,
-        { "gc" , &native_gc , 1 , 0 , 0 } ,
-        { "UUID", &_UUID, 0, 0, 0 } ,
-        { "MD5", &_MD5, 0, 0, 0 } ,
-        { "HexData", &_HexData, 0, 0, 0 } ,
-        { 0 , 0 , 0 , 0 , 0 }
+        FUNCSPEC( "print" , &native_print , 0 , 0 ),
+        FUNCSPEC( "nativeHelper" , &native_helper , 1 , 0 ),
+        FUNCSPEC( "load" , &native_load , 1 , 0 ),
+        FUNCSPEC( "gc" , &native_gc , 1 , 0 ),
+        FUNCSPEC( "UUID", &_UUID, 0, 0 ),
+        FUNCSPEC( "MD5", &_MD5, 0, 0 ),
+        FUNCSPEC( "HexData", &_HexData, 0, 0 ),
+        FUNCSPEC( NULL , NULL , 0 , 0 ),
     };
 
     // ----END global helpers ----
 
     // Object helpers
 
+#if JS_VERSION < 185
     JSBool bson_get_size(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool bson_get_size(JSContext * cx , uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+#endif
         try {
             if ( argc != 1 || !JSVAL_IS_OBJECT( argv[ 0 ] ) ) {
                 JS_ReportError( cx , "bsonsize requires one valid object" );
@@ -1253,7 +1357,7 @@
             }
             Convertor c(cx);
             if ( argv[0] == JSVAL_VOID || argv[0] == JSVAL_NULL ) {
-                *rval = c.toval( 0.0 );
+                JS_SET_RVAL(cx, rval, c.toval( 0.0 ));
                 return JS_TRUE;
             }
 
@@ -1271,7 +1375,7 @@
                 BSONObj temp = c.toObject( o );
                 size = temp.objsize();
             }
-            *rval = c.toval( size );
+            JS_SET_RVAL(cx, rval, c.toval( size ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1287,13 +1391,19 @@
     }
 
     JSFunctionSpec objectHelpers[] = {
-        { "bsonsize" , &bson_get_size , 1 , 0 , 0 } ,
-        { 0 , 0 , 0 , 0 , 0 }
+		FUNCSPEC( "bsonsize" , &bson_get_size , 1 , 0 ),
+		FUNCSPEC( NULL, NULL, 0, 0 )
     };
 
     // end Object helpers
 
-    JSBool resolveBSONField( JSContext *cx, JSObject *obj, jsval id, uintN flags, JSObject **objp ) {
+#if JS_VERSION < 185
+    JSBool resolveBSONField( JSContext *cx, JSObject *obj, jsval idval, uintN flags, JSObject **objp ) {
+#else
+    JSBool resolveBSONField( JSContext *cx, JSObject *obj, jsid id, uintN flags, JSObject **objp ) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
         try {
             verify( JS_EnterLocalRootScope( cx ) );
         }
@@ -1317,7 +1427,7 @@
             holder->check();
 
             Convertor c( cx );
-            string s( c.toString( id ) );
+            string s( c.toString( idval ) );
             BSONElement e = holder->_obj[ s.c_str() ];
             if ( e.type() == EOO || holder->_removed.count( s ) ) {
                 *objp = 0;
@@ -1366,7 +1476,7 @@
     public:
 
         SMEngine() {
-#ifdef SM18
+#if defined(SM18) || JS_VERSION >= 180
             JS_SetCStringsAreUTF8();
 #endif
 
@@ -1436,7 +1546,11 @@
             //JS_SetVersion( _context , JSVERSION_LATEST); TODO
             JS_SetErrorReporter( _context , errorReporter );
 
+#if JS_VERSION < 185
             _global = JS_NewObject( _context , &global_class, NULL, NULL);
+#else
+            _global = JS_NewCompartmentAndGlobalObject( _context , &global_class, NULL);
+#endif
             massert( 10432 ,  "JS_NewObject failed for global" , _global );
             JS_SetGlobalObject( _context , _global );
             massert( 10433 ,  "js init failed" , JS_InitStandardClasses( _context , _global ) );
@@ -1457,7 +1571,7 @@
             uassert( 10223 ,  "deleted SMScope twice?" , _convertor );
 
             if ( _this ) {
-                JS_RemoveRoot( _context , &_this );
+                JS_RemoveObjectRoot( _context , &_this );
                 _this = 0;
             }
 
@@ -1621,13 +1735,13 @@
         void setThis( const BSONObj * obj ) {
             smlock;
             if ( _this ) {
-                JS_RemoveRoot( _context , &_this );
+                JS_RemoveObjectRoot( _context , &_this );
                 _this = 0;
             }
 
             if ( obj ) {
                 _this = _convertor->toJSObject( obj );
-                JS_AddNamedRoot( _context , &_this , "scope this" );
+                JS_AddNamedObjectRoot( _context , &_this , "scope this" );
             }
         }
 
@@ -1682,7 +1796,11 @@
 
         }
 
+#if JS_VERSION < 185
         static JSBool interrupt( JSContext *cx, JSScript *script ) {
+#else
+        static JSBool interrupt( JSContext *cx, JSObject *script ) {
+#endif
             return _interrupt( cx );
         }
 
@@ -1693,7 +1811,7 @@
                 spec->start = boost::posix_time::microsec_clock::local_time();
                 spec->count = 0;
                 JS_SetContextPrivate( _context, (void*)spec );
-#if defined(SM181) && !defined(XULRUNNER190)
+#if (defined(SM181) && !defined(XULRUNNER190)) || JS_VERSION >= 180
                 JS_SetOperationCallback( _context, _interrupt );
 #else
                 JS_SetBranchCallback( _context, interrupt );
@@ -1703,7 +1821,7 @@
 
         void uninstallInterrupt( int timeoutMs ) {
             if ( timeoutMs != 0 || ScriptEngine::haveCheckInterruptCallback() ) {
-#if defined(SM181) && !defined(XULRUNNER190)
+#if (defined(SM181) && !defined(XULRUNNER190)) || JS_VERSION >= 180
                 JS_SetOperationCallback( _context , 0 );
 #else
                 JS_SetBranchCallback( _context, 0 );
@@ -1941,7 +2059,13 @@
         }
     }
 
+#if JS_VERSION < 185
     JSBool native_load( JSContext *cx , JSObject *obj , uintN argc, jsval *argv , jsval *rval ) {
+#else
+    JSBool native_load( JSContext * cx , uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JS_SET_RVAL(cx, rval, JSVAL_VOID);
+#endif
         try {
             Convertor c(cx);
 
diff -ru mongodb-src-r2.2.0.orig/src/mongo/scripting/engine_spidermonkey.h mongodb-src-r2.2.0/src/mongo/scripting/engine_spidermonkey.h
--- mongodb-src-r2.2.0.orig/src/mongo/scripting/engine_spidermonkey.h	2012-08-28 00:28:11.000000000 -0500
+++ mongodb-src-r2.2.0/src/mongo/scripting/engine_spidermonkey.h	2012-09-19 13:16:37.230297626 -0500
@@ -71,7 +71,11 @@
     extern boost::thread_specific_ptr<SMScope> currentScope;
 
     // bson
+#if JS_VERSION < 185
     JSBool resolveBSONField( JSContext *cx, JSObject *obj, jsval id, uintN flags, JSObject **objp );
+#else
+    JSBool resolveBSONField( JSContext *cx, JSObject *obj, jsid id, uintN flags, JSObject **objp );
+#endif
 
     // mongo
     void initMongoJS( SMScope * scope , JSContext * cx , JSObject * global , bool local );
diff -ru mongodb-src-r2.2.0.orig/src/mongo/scripting/sm_db.cpp mongodb-src-r2.2.0/src/mongo/scripting/sm_db.cpp
--- mongodb-src-r2.2.0.orig/src/mongo/scripting/sm_db.cpp	2012-08-28 00:28:11.000000000 -0500
+++ mongodb-src-r2.2.0/src/mongo/scripting/sm_db.cpp	2012-09-19 13:21:46.679317452 -0500
@@ -22,6 +22,11 @@
 #include "mongo/util/base64.h"
 #include "mongo/util/text.h"
 
+#if JS_VERSION >= 185
+extern JS_FRIEND_API(jsdouble)
+js_DateGetMsecSinceEpoch(JSContext *cx, JSObject *obj);
+#endif
+
 #if( BOOST_VERSION >= 104200 )
 #define HAVE_UUID 1
 #endif
@@ -76,7 +81,15 @@
         return holder->get();
     }
 
+#if JS_VERSION < 185
     JSBool internal_cursor_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass internal_cursor_class;
+
+    JSBool internal_cursor_constructor( JSContext *cx, uintN argc, jsval *vp ) {
+        JSObject *obj = JS_NewObject(cx, &internal_cursor_class, NULL, NULL);
+        JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             uassert( 10236 ,  "no args to internal_cursor_constructor" , argc == 0 );
             verify( JS_SetPrivate( cx , obj , 0 ) ); // just for safety
@@ -113,10 +126,15 @@
         }
     }
 
+#if JS_VERSION < 185
     JSBool internal_cursor_hasNext(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool internal_cursor_hasNext(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             DBClientCursor *cursor = getCursor( cx, obj );
-            *rval = cursor->more() ? JSVAL_TRUE : JSVAL_FALSE;
+            JS_SET_RVAL(cx, rval, cursor->more() ? JSVAL_TRUE : JSVAL_FALSE);
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -131,7 +149,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool internal_cursor_objsLeftInBatch(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool internal_cursor_objsLeftInBatch(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             DBClientCursor *cursor = getCursor( cx, obj );
             Convertor c(cx);
@@ -150,7 +173,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool internal_cursor_next(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool internal_cursor_next(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             DBClientCursor *cursor = getCursor( cx, obj );
             if ( ! cursor->more() ) {
@@ -160,7 +188,7 @@
 
             BSONObj n = cursor->next();
             Convertor c(cx);
-            *rval = c.toval( &n );
+            JS_SET_RVAL(cx, rval, c.toval( &n ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -176,10 +204,10 @@
     }
 
     JSFunctionSpec internal_cursor_functions[] = {
-        { "hasNext" , internal_cursor_hasNext , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "objsLeftInBatch" , internal_cursor_objsLeftInBatch , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "next" , internal_cursor_next , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { 0 }
+        FUNCSPEC( "hasNext" , internal_cursor_hasNext , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "objsLeftInBatch" , internal_cursor_objsLeftInBatch , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "next" , internal_cursor_next , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( NULL, NULL, 0, 0 ),
     };
 
     JSClass internal_cursor_class = {
@@ -188,7 +216,7 @@
         JS_PropertyStub,                // addProperty
         JS_PropertyStub,                // delProperty
         JS_PropertyStub,                // getProperty
-        JS_PropertyStub,                // setProperty
+        JS_StrictPropertyStub,          // setProperty
         JS_EnumerateStub,               // enumerate
         JS_ResolveStub,                 // resolve
         JS_ConvertStub,                 // convert
@@ -199,7 +227,15 @@
 
     // ------ mongo stuff ------
 
+#if JS_VERSION < 185
     JSBool mongo_local_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass mongo_class;
+
+    JSBool mongo_local_constructor(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_NewObject(cx, &mongo_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             shared_ptr< DBClientWithCommands > client( createDirectClient() );
             verify( JS_SetPrivate( cx , obj , (void*)( new shared_ptr< DBClientWithCommands >( client ) ) ) );
@@ -221,7 +257,14 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool mongo_external_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool mongo_external_constructor(JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_NewObject(cx, &mongo_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             smuassert( cx ,  "0 or 1 args to Mongo" , argc <= 1 );
 
@@ -301,11 +344,11 @@
 
     JSClass mongo_class = {
         "Mongo",                                        // class name
-        JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE,      // flags
+        JSCLASS_HAS_PRIVATE,                            // flags
         JS_PropertyStub,                                // addProperty
         JS_PropertyStub,                                // delProperty
         JS_PropertyStub,                                // getProperty
-        JS_PropertyStub,                                // setProperty
+        JS_StrictPropertyStub,                          // setProperty
         JS_EnumerateStub,                               // enumerate
         JS_ResolveStub,                                 // resolve
         JS_ConvertStub,                                 // convert
@@ -387,7 +430,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool mongo_find(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool mongo_find(JSContext *cx, uintN argc, jsval *rval) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             smuassert( cx , "mongo_find needs 7 args" , argc == 7 );
             shared_ptr< DBClientWithCommands > * connHolder = (shared_ptr< DBClientWithCommands >*)JS_GetPrivate( cx , obj );
@@ -436,7 +485,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool mongo_update(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool mongo_update(JSContext *cx, uintN argc, jsval *rval) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             smuassert( cx ,  "mongo_update needs at least 3 args" , argc >= 3 );
             smuassert( cx ,  "2nd param to update has to be an object" , JSVAL_IS_OBJECT( argv[1] ) );
@@ -477,7 +532,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool mongo_insert(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool mongo_insert(JSContext *cx, uintN argc, jsval *rval) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             smuassert( cx ,  "mongo_insert needs 2 args" , argc == 2 );
             smuassert( cx ,  "2nd param to insert has to be an object" , JSVAL_IS_OBJECT( argv[1] ) );
@@ -539,7 +600,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool mongo_remove(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool mongo_remove(JSContext *cx, uintN argc, jsval *rval) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             smuassert( cx ,  "mongo_remove needs 2 or 3 arguments" , argc == 2 || argc == 3 );
             smuassert( cx ,  "2nd param to insert has to be an object" , JSVAL_IS_OBJECT( argv[1] ) );
@@ -581,18 +648,27 @@
     }
 
     JSFunctionSpec mongo_functions[] = {
-        { "auth" , mongo_auth , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "logout", mongo_logout, 0, JSPROP_READONLY | JSPROP_PERMANENT, 0 },
-        { "find" , mongo_find , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "update" , mongo_update , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "insert" , mongo_insert , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "remove" , mongo_remove , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { 0 }
+        FUNCSPEC( "auth" , mongo_auth , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "logout", mongo_logout, 0, JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "find"   , mongo_find   , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "update" , mongo_update , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "insert" , mongo_insert , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "remove" , mongo_remove , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( NULL, NULL, 0, 0 ),
     };
 
     // -------------  db_collection -------------
 
+#if JS_VERSION < 185
     JSBool db_collection_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass db_collection_class;
+
+    JSBool db_collection_constructor(JSContext *cx, uintN argc, jsval *vp ) {
+        jsval *argv = JS_ARGV(cx, vp);
+        JSObject *obj = JS_NewObject(cx, &db_collection_class, NULL, NULL);
+        JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             smuassert( cx ,  "db_collection_constructor wrong args" , argc == 4 );
             Convertor c(cx);
@@ -619,13 +695,21 @@
         return JS_TRUE;
     }
 
-    JSBool db_collection_resolve( JSContext *cx, JSObject *obj, jsval id, uintN flags, JSObject **objp ) {
+#if JS_VERSION < 185
+    JSBool db_collection_resolve( JSContext *cx, JSObject *obj, jsval idval, uintN flags, JSObject **objp ) {
+#else
+    JSBool db_collection_resolve( JSContext *cx, JSObject *obj, jsid id, uintN flags, JSObject **objp ) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
+        *objp = NULL;
+
         try {
             if ( flags & JSRESOLVE_ASSIGNING )
                 return JS_TRUE;
 
             Convertor c( cx );
-            string collname = c.toString( id );
+            string collname = c.toString( idval );
 
             if ( isSpecialName( collname ) )
                 return JS_TRUE;
@@ -670,7 +754,7 @@
         JS_PropertyStub,                                // addProperty
         JS_PropertyStub,                                // delProperty
         JS_PropertyStub,                                // getProperty
-        JS_PropertyStub,                                // setProperty
+        JS_StrictPropertyStub,                          // setProperty
         JS_EnumerateStub,                               // enumerate
         (JSResolveOp)db_collection_resolve,             // resolve
         JS_ConvertStub,                                 // convert
@@ -706,7 +790,16 @@
     // --------------  DB ---------------
 
 
+#if JS_VERSION < 185
     JSBool db_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass db_class;
+
+    JSBool db_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_NewObject(cx, &db_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             smuassert( cx,  "wrong number of arguments to DB" , argc == 2 );
 
@@ -731,7 +824,15 @@
         return JS_TRUE;
     }
 
-    JSBool db_resolve( JSContext *cx, JSObject *obj, jsval id, uintN flags, JSObject **objp ) {
+#if JS_VERSION < 185
+    JSBool db_resolve( JSContext *cx, JSObject *obj, jsval idval, uintN flags, JSObject **objp ) {
+#else
+    JSBool db_resolve( JSContext *cx, JSObject *obj, jsid id, uintN flags, JSObject **objp ) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
+        *objp = NULL;
+
         try {
             if ( flags & JSRESOLVE_ASSIGNING )
                 return JS_TRUE;
@@ -741,7 +842,7 @@
             if ( obj == c.getGlobalPrototype( "DB" ) )
                 return JS_TRUE;
 
-            string collname = c.toString( id );
+            string collname = c.toString( idval );
 
             if ( isSpecialName( collname ) )
                 return JS_TRUE;
@@ -772,7 +873,7 @@
 
     JSClass db_class = {
         "DB" , JSCLASS_HAS_PRIVATE | JSCLASS_NEW_RESOLVE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, (JSResolveOp)(&db_resolve) , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
@@ -780,7 +881,13 @@
 
     // -------------- object id -------------
 
+#if JS_VERSION < 185
     JSBool object_id_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool object_id_constructor( JSContext *cx, uintN argc, jsval *rval) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = NULL;
+#endif
         try {
             Convertor c( cx );
 
@@ -796,10 +903,10 @@
                 oid.init( s );
             }
 
-            if ( ! JS_InstanceOf( cx , obj , &object_id_class , 0 ) ) {
+            if ( ! obj || ! JS_InstanceOf( cx , obj , &object_id_class , 0 ) ) {
                 obj = JS_NewObject( cx , &object_id_class , 0 , 0 );
                 CHECKNEWOBJECT( obj, cx, "object_id_constructor" );
-                *rval = OBJECT_TO_JSVAL( obj );
+                JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL( obj ));
             }
 
             jsval v = c.toval( oid.str().c_str() );
@@ -820,14 +927,21 @@
 
     JSClass object_id_class = {
         "ObjectId" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
     // dbpointer
 
+#if JS_VERSION < 185
     JSBool dbpointer_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool dbpointer_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_NewObject(cx, &dbpointer_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             if ( argc != 2 ) {
                 JS_ReportError( cx, "DBPointer takes 2 arguments -- DBPointer(namespace,objectId)" );
@@ -861,7 +975,7 @@
 
     JSClass dbpointer_class = {
         "DBPointer" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
@@ -871,7 +985,14 @@
     };
 
 
+#if JS_VERSION < 185
     JSBool dbref_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool dbref_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_NewObject(cx, &dbref_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             if ( argc != 2 ) {
                 JS_ReportError( cx , "DBRef takes 2 arguments -- DBRef($ref,$id)" );
@@ -909,7 +1030,16 @@
     // UUID **************************
 
 #if 0
+#if JS_VERSION < 185
     JSBool uuid_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass uuid_class;
+
+    JSBool uuid_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_NewObject(cx, &uuid_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         Convertor c( cx );
 
         if( argc == 0 ) {
@@ -947,7 +1077,12 @@
         }
     }
 
+#if JS_VERSION < 185
     JSBool uuid_tostring(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool uuid_tostring(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         Convertor c(cx);
         void *holder = JS_GetPrivate( cx, obj );
         verify( holder );
@@ -956,7 +1091,7 @@
         ss << "UUID(\"" << toHex(data, 16);
         ss << "\")";
         string ret = ss.str();
-        return *rval = c.toval( ret.c_str() );
+        return JS_SET_RVAL(cx, rval, c.toval( ret.c_str() ));
     }
 
     void uuid_finalize( JSContext * cx , JSObject * obj ) {
@@ -984,7 +1119,14 @@
 
     // BinData **************************
 
+#if JS_VERSION < 185
     JSBool bindata_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool bindata_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = JS_NewObject(cx, &bindata_class, NULL, NULL);
+        JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
         try {
             if ( argc != 2 ) {
                 JS_ReportError( cx , "BinData takes 2 arguments -- BinData(subtype,data)" );
@@ -1027,7 +1169,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool bindata_tostring(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool bindata_tostring(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             Convertor c(cx);
             int type = static_cast<int>( c.getNumber( obj, "type" ) );
@@ -1040,7 +1187,7 @@
             base64::encode( ss, data, len );
             ss << "\")";
             string ret = ss.str();
-            *rval = c.toval( ret.c_str() );
+            return JS_SET_RVAL(cx, rval, c.toval( ret.c_str() ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1055,7 +1202,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool bindataBase64(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool bindataBase64(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             Convertor c(cx);
             int len = static_cast<int>( c.getNumber( obj, "len" ) );
@@ -1065,7 +1217,7 @@
             stringstream ss;
             base64::encode( ss, data, len );
             string ret = ss.str();
-            *rval = c.toval( ret.c_str() );
+            return JS_SET_RVAL(cx, rval, c.toval( ret.c_str() ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1080,7 +1232,12 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool bindataAsHex(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool bindataAsHex(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             Convertor c(cx);
             int len = static_cast<int>( c.getNumber( obj, "len" ) );
@@ -1096,7 +1253,7 @@
                 ss << setw(2) << v;
             }
             string ret = ss.str();
-            *rval = c.toval( ret.c_str() );
+            return JS_SET_RVAL(cx, rval, c.toval( ret.c_str() ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1132,16 +1289,16 @@
 
     JSClass bindata_class = {
         "BinData" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, bindata_finalize,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
     JSFunctionSpec bindata_functions[] = {
-        { "toString" , bindata_tostring , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "hex", bindataAsHex, 0, JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "base64", bindataBase64, 0, JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { 0 }
+        FUNCSPEC( "toString" , bindata_tostring , 0 , JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "hex", bindataAsHex, 0, JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( "base64", bindataBase64, 0, JSPROP_READONLY | JSPROP_PERMANENT ),
+        FUNCSPEC( NULL, NULL, 0, 0 ),
     };
 
     // Map
@@ -1150,13 +1307,24 @@
         return s == "put" || s == "get" || s == "_get" || s == "values" || s == "_data" || s == "constructor" ;
     }
 
+#if JS_VERSION < 185
     JSBool map_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass map_class;
+
+    JSBool map_constructor( JSContext *cx, uintN argc, jsval *rval) {
+#endif
         try {
             if ( argc > 0 ) {
                 JS_ReportError( cx , "Map takes no arguments" );
                 return JS_FALSE;
             }
 
+#if JS_VERSION >= 185
+            JSObject *obj = JS_NewObject(cx, &map_class, NULL, NULL);
+            JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
+
             JSObject * arrayObj = JS_NewObject( cx , 0 , 0 , 0 );
             CHECKNEWOBJECT( arrayObj, cx, "map_constructor" );
 
@@ -1176,7 +1344,13 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool map_prop( JSContext *cx, JSObject *obj, jsval idval, jsval *vp ) {
+#else
+    JSBool map_prop( JSContext *cx, JSObject *obj, jsid id, jsval *vp ) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
         try {
             Convertor c(cx);
             string str( c.toString( idval ) );
@@ -1199,9 +1373,20 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION >= 185
+    JSBool map_prop_strict( JSContext *cx, JSObject *obj, jsid id, JSBool strict, jsval *vp ) {
+        return map_prop( cx , obj , id , vp );
+    }
+#endif
+
     JSClass map_class = {
         "Map" , JSCLASS_HAS_PRIVATE ,
-        map_prop, JS_PropertyStub, map_prop, map_prop,
+        map_prop, JS_PropertyStub, map_prop,
+#if JS_VERSION < 185
+        map_prop,
+#else
+        map_prop_strict,
+#endif
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
@@ -1215,21 +1400,27 @@
 
     JSClass timestamp_class = {
         "Timestamp" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
+#if JS_VERSION < 185
     JSBool timestamp_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool timestamp_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = NULL;
+#endif
         try {
             smuassert( cx,
                        "Timestamp takes 0 or 2 arguments -- Timestamp() or Timestamp(t,i)",
                        argc == 0 || argc == 2 );
 
-            if ( ! JS_InstanceOf( cx , obj , &timestamp_class , 0 ) ) {
+            if ( ! obj || ! JS_InstanceOf( cx , obj , &timestamp_class , 0 ) ) {
                 obj = JS_NewObject( cx , &timestamp_class , 0 , 0 );
                 CHECKNEWOBJECT( obj, cx, "timestamp_constructor" );
-                *rval = OBJECT_TO_JSVAL( obj );
+                JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL( obj ));
             }
 
             Convertor c( cx );
@@ -1257,19 +1448,26 @@
 
     JSClass numberlong_class = {
         "NumberLong" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
+#if JS_VERSION < 185
     JSBool numberlong_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool numberlong_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = NULL;
+#endif
+
         try {
             smuassert( cx , "NumberLong needs 0 or 1 args" , argc == 0 || argc == 1 );
 
-            if ( ! JS_InstanceOf( cx , obj , &numberlong_class , 0 ) ) {
+            if ( ! obj || ! JS_InstanceOf( cx , obj , &numberlong_class , 0 ) ) {
                 obj = JS_NewObject( cx , &numberlong_class , 0 , 0 );
                 CHECKNEWOBJECT( obj, cx, "numberlong_constructor" );
-                *rval = OBJECT_TO_JSVAL( obj );
+                JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL( obj ));
             }
 
             Convertor c( cx );
@@ -1307,10 +1505,15 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool numberlong_valueof(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool numberlong_valueof(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             Convertor c(cx);
-            *rval = c.toval( static_cast<double>( c.toNumberLongUnsafe( obj ) ) );
+            JS_SET_RVAL(cx, rval, c.toval( static_cast<double>( c.toNumberLongUnsafe( obj ) ) ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1325,11 +1528,21 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool numberlong_tonumber(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
         return numberlong_valueof( cx, obj, argc, argv, rval );
+#else
+    JSBool numberlong_tonumber(JSContext *cx, uintN argc, jsval *rval) {
+        return numberlong_valueof( cx, argc, rval );
+#endif
     }
 
+#if JS_VERSION < 185
     JSBool numberlong_tostring(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool numberlong_tostring(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT(cx, rval);
+#endif
         try {
             Convertor c(cx);
             stringstream ss;
@@ -1342,7 +1555,7 @@
                 ss << "NumberLong(" << val << ")";
 
             string ret = ss.str();
-            *rval = c.toval( ret.c_str() );
+            JS_SET_RVAL(cx, rval, c.toval( ret.c_str() ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1358,27 +1571,33 @@
     }
 
     JSFunctionSpec numberlong_functions[] = {
-        { "valueOf" , numberlong_valueof , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "toNumber" , numberlong_tonumber , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "toString" , numberlong_tostring , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { 0 }
+        FUNCSPEC( "valueOf" , numberlong_valueof , 0 , JSPROP_READONLY | JSPROP_PERMANENT ) ,
+        FUNCSPEC( "toNumber" , numberlong_tonumber , 0 , JSPROP_READONLY | JSPROP_PERMANENT ) ,
+        FUNCSPEC( "toString" , numberlong_tostring , 0 , JSPROP_READONLY | JSPROP_PERMANENT ) ,
+        FUNCSPEC( NULL , NULL , 0 , 0 )
     };
 
     JSClass numberint_class = {
         "NumberInt" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
+#if JS_VERSION < 185
     JSBool numberint_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    JSBool numberint_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+        JSObject *obj = NULL;
+#endif
         try {
             smuassert( cx , "NumberInt needs 0 or 1 args" , argc == 0 || argc == 1 );
 
-            if ( ! JS_InstanceOf( cx , obj , &numberint_class , 0 ) ) {
+            if ( ! obj || ! JS_InstanceOf( cx , obj , &numberint_class , 0 ) ) {
                 obj = JS_NewObject( cx , &numberint_class , 0 , 0 );
                 CHECKNEWOBJECT( obj, cx, "numberint_constructor" );
-                *rval = OBJECT_TO_JSVAL( obj );
+                JS_SET_RVAL( cx, rval, OBJECT_TO_JSVAL( obj ) );
             }
 
             Convertor c( cx );
@@ -1416,10 +1635,15 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool numberint_valueof(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool numberint_valueof(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT( cx , rval );
+#endif
         try {
             Convertor c(cx);
-            *rval = c.toval( static_cast<double>( c.toNumberInt( obj ) ) );
+            JS_SET_RVAL( cx , rval , c.toval( static_cast<double>( c.toNumberInt( obj ) ) ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1434,16 +1658,26 @@
         return JS_TRUE;
     }
 
+#if JS_VERSION < 185
     JSBool numberint_tonumber(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
         return numberint_valueof( cx, obj, argc, argv, rval );
+#else
+    JSBool numberint_tonumber(JSContext *cx, uintN argc, jsval *rval) {
+        return numberint_valueof( cx, argc, rval );
+#endif
     }
 
+#if JS_VERSION < 185
     JSBool numberint_tostring(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
+#else
+    JSBool numberint_tostring(JSContext *cx, uintN argc, jsval *rval) {
+        JSObject *obj = JS_THIS_OBJECT( cx , rval );
+#endif
         try {
             Convertor c(cx);
             int val = c.toNumberInt( obj );
             string ret = str::stream() << "NumberInt(" << val << ")";
-            *rval = c.toval( ret.c_str() );
+            JS_SET_RVAL( cx, rval, c.toval( ret.c_str() ));
         }
         catch ( const AssertionException& e ) {
             if ( ! JS_IsExceptionPending( cx ) ) {
@@ -1459,31 +1693,43 @@
     }
 
     JSFunctionSpec numberint_functions[] = {
-        { "valueOf" , numberint_valueof , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "toNumber" , numberint_tonumber , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { "toString" , numberint_tostring , 0 , JSPROP_READONLY | JSPROP_PERMANENT, 0 } ,
-        { 0 }
+        FUNCSPEC( "valueOf"  , numberint_valueof  , 0 , JSPROP_READONLY | JSPROP_PERMANENT ) ,
+        FUNCSPEC( "toNumber" , numberint_tonumber , 0 , JSPROP_READONLY | JSPROP_PERMANENT ) ,
+        FUNCSPEC( "toString" , numberint_tostring , 0 , JSPROP_READONLY | JSPROP_PERMANENT ) ,
+        FUNCSPEC( NULL , NULL , 0 , 0 )
     };
 
     JSClass minkey_class = {
         "MinKey" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
     JSClass maxkey_class = {
         "MaxKey" , JSCLASS_HAS_PRIVATE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, JS_ResolveStub , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
 
     // dbquery
 
+#if JS_VERSION < 185
     JSBool dbquery_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ) {
+#else
+    extern JSClass dbquery_class;
+
+    JSBool dbquery_constructor( JSContext *cx, uintN argc, jsval *rval ) {
+        jsval *argv = JS_ARGV(cx, rval);
+#endif
+
         try {
             smuassert( cx ,  "DDQuery needs at least 4 args" , argc >= 4 );
+#if JS_VERSION >= 185
+            JSObject *obj = JS_NewObject(cx, &dbquery_class, NULL, NULL);
+            JS_SET_RVAL(cx, rval, OBJECT_TO_JSVAL(obj));
+#endif
 
             Convertor c(cx);
             c.setProperty( obj , "_mongo" , argv[0] );
@@ -1542,18 +1788,26 @@
         return JS_TRUE;
     }
 
-    JSBool dbquery_resolve( JSContext *cx, JSObject *obj, jsval id, uintN flags, JSObject **objp ) {
+#if JS_VERSION < 185
+    JSBool dbquery_resolve( JSContext *cx, JSObject *obj, jsval idval, uintN flags, JSObject **objp ) {
+#else
+    JSBool dbquery_resolve( JSContext *cx, JSObject *obj, jsid id, uintN flags, JSObject **objp ) {
+        jsval idval;
+        verify(JS_IdToValue(cx, id, &idval));
+#endif
+        *objp = NULL;
+
         try {
             if ( flags & JSRESOLVE_ASSIGNING )
                 return JS_TRUE;
 
-            if ( ! JSVAL_IS_NUMBER( id ) )
+            if ( ! JSVAL_IS_NUMBER( idval ) )
                 return JS_TRUE;
 
             jsval val = JSVAL_VOID;
-            verify( JS_CallFunctionName( cx , obj , "arrayAccess" , 1 , &id , &val ) );
             Convertor c(cx);
-            c.setProperty( obj , c.toString( id ).c_str() , val );
+            verify( JS_CallFunctionName( cx , obj , "arrayAccess" , 1 , &idval , &val ) );
+            c.setProperty( obj , c.toString( idval ).c_str() , val );
             *objp = obj;
         }
         catch ( const AssertionException& e ) {
@@ -1571,7 +1825,7 @@
 
     JSClass dbquery_class = {
         "DBQuery" , JSCLASS_NEW_RESOLVE ,
-        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
+        JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
         JS_EnumerateStub, (JSResolveOp)(&dbquery_resolve) , JS_ConvertStub, JS_FinalizeStub,
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
@@ -1674,7 +1928,11 @@
             return true;
         }
 #else
+#if JS_VERSION < 185
         if ( JS_InstanceOf( c->_context , o, &js_DateClass , 0 ) ) {
+#else
+        if ( JS_ObjectIsDate( c->_context , o ) ) {
+#endif
             jsdouble d = js_DateGetMsecSinceEpoch( c->_context , o );
             long long d2 = (long long)d;
             b.appendDate( name , Date_t((unsigned long long)d2) );
@@ -1708,6 +1966,8 @@
     bool isDate( JSContext * cx , JSObject * o ) {
 #if defined( SM16 ) || defined( MOZJS ) || defined( XULRUNNER )
         return js_DateGetMsecSinceEpoch( cx , o ) != 0;
+#elif JS_VERSION >= 185
+        return JS_ObjectIsDate( cx , o );
 #else
         return JS_InstanceOf( cx , o, &js_DateClass, 0 );
 #endif
